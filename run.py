import streamlit as st
import time
from streamlit.components.v1 import html
import streamlit.components.v1 as components

from langchain.schema import HumanMessage, SystemMessage
from langchain.chat_models.gigachat import GigaChat
from Levenshtein import distance
import emoji
import re

js_scroll = """
<script>
    itemsScrollTo = parent.window.document.getElementsByClassName("st-emotion-cache-0"); itemsScrollTo[itemsScrollTo.length-1].scrollIntoView();
</script>
"""

try:
    custom_input = components.declare_component("custom_input", path="./frontend")

    def reset_last_msg():
        st.session_state.input_msg = None
        st.session_state.show_input = True
        st.session_state.is_last_msg = False

        st.session_state.messages = st.session_state.messages[
            : st.session_state.answer_index
        ]
        st.session_state.answer_index -= 3

        st.session_state.dialog_index -= 1
        st.session_state.next_dialog = dialog[st.session_state.dialog_index]
        st.session_state.score.pop()
        st.session_state.show_reset_button = len(st.session_state.messages) > 1

    st.markdown(
        """
    <style>
    span {
        word-break: break-all; 
    }
    iframe {
        position: fixed;
        bottom: 0;
        z-index: 100;
    }

    .st-emotion-cache-8ijwm3 {
        height: 48px;
    }
   
    .stApp [data-testid="stToolbar"]{
        display:none;
    }
    
    .st-emotion-cache-qcqlej{
        display:none;
    }
    .block-container {
        padding: 2rem 1rem 10rem 1rem;
    }
    </style>
    """,
        unsafe_allow_html=True,
    )

    system_prompt = SystemMessage(
        content='\
    –¢—ã - —Ç—Ä–µ–Ω–µ—Ä–∞–∂–µ—Ä —Ü–µ–Ω—Ç—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –¢–≤–æ—è —Ü–µ–ª—å: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω–∞–≤—ã–∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤.\n\
    –û—Ü–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø—É–Ω–∫—Ç–∞–º:\n\
    1. –°–º—ã—Å–ª–æ–≤–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å: –°—Ä–∞–≤–Ω–∏ –æ—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –≤–µ—Ä–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å—Ö–æ–∂–µ—Å—Ç–∏.\n\
    2. –ö–ª–∏–µ–Ω—Ç–æ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞ –≤ –æ—Ç–≤–µ—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–∞–∫–æ–≥–æ –æ–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É.\n\
    3. –ü–æ–Ω—è—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞: –û—Ü–µ–Ω–∏ –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —è—Å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ù–∞—Å–∫–æ–ª—å–∫–æ –ª–µ–≥–∫–æ —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–Ω—è—Ç –∫–ª–∏–µ–Ω—Ç–æ–º.\n\
    \n\
    –ü–æ –∫–∞–∂–¥–æ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π <–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π> –∏ –ø–æ—Å—Ç–∞–≤—å <–û—Ü–µ–Ω–∫–∞> = {0, 25, 50, 75, 100}: "<–ò–º—è –ø—É–Ω–∫—Ç–∞>: <–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π>. –û—Ü–µ–Ω–∫–∞: <–û—Ü–µ–Ω–∫–∞>%."'
    )

    dialog = [
        (
            "–ú–µ–Ω—è —É–∂–µ —Ç—Ä—è—Å–µ—Ç –æ—Ç –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç-—Ü–µ–Ω—Ç—Ä–∞. –û–±—ä—è—Å–Ω–∏—Ç–µ, –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∫–∞–∫–æ–≥–æ –∑–∞–∫–æ–Ω–∞ –≤–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–∞–º–∏ –ø—Ä–µ—Ä—ã–≤–∞—é—Ç —Å–≤—è–∑—å?",
            "–°–æ–∂–∞–ª–µ—é, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–∞–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —É –í–∞—Å —Å–ª—É—á–∏–ª–æ—Å—å?",
        ),
        (
            "–ñ–∞–ª–æ–±—É –ø–∏—à–∏—Ç–µ –¥–∞–≤–∞–π—Ç–µ!!!",
            "–Ø –∏—Å–∫—Ä–µ–Ω–Ω–µ —Ö–æ—á—É –í–∞–º –ø–æ–º–æ—á—å üôè! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å –∫–∞–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –í—ã –æ–±—Ä–∞—â–∞–ª–∏—Å—å?",
        ),
        (
            "–ù–µ –Ω–∞–¥–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –∫–∞–∫–æ–π —É –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å! –ü–∏—à–∏—Ç–µ –∂–∞–ª–æ–±—É!!!",
            "–•–æ—Ä–æ—à–æ. –î–∞–≤–∞–π—Ç–µ —Å–≤–µ—Ä–∏–º –í–∞—à—É —Ñ–∞–º–∏–ª–∏—é, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. –ù–∞–∑–æ–≤–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
        ),
        (
            "–ó–∞—á–µ–º? –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–∞–º–∏ –Ω–∞–π—Ç–∏? ... –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á, 15 –º–∞—è 1980. –ß—Ç–æ –µ—â–µ –≤–∞–º —Ç–∞–º –æ—Ç –º–µ–Ω—è –Ω—É–∂–Ω–æ?!",
            "–°–ø–∞—Å–∏–±–æ, —è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —Å–æ–æ–±—â—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –æ–± —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, –æ–Ω –ø—Ä–∏–º–µ—Ç –≤—Å–µ –º–µ—Ä—ã.",
        ),
        (
            "–õ–∏—à–∏—Ç–µ –ø—Ä–µ–º–∏–∏ –Ω–µ—Ä–∞–¥–∏–≤–æ–≥–æ! –Ø –Ω–µ —Ö–æ—á—É –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç—Ä–∞—Ç–∏—Ç—å —Å—Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –Ω–∞ –≤–∞—Å. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥–∞–ª–∏?",
            "–î–∞, –±—É–¥—å—Ç–µ —É–≤–µ—Ä–µ–Ω—ã. –Ø –∂–µ–ª–∞—é –í–∞–º –ø–æ–º–æ—á—å, —Å –∫–∞–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –í—ã –æ–±—Ä–∞—â–∞–ª–∏—Å—å?",
        ),
        ("–ù–µ—Ç, —è —É–∂–µ –≤—Å–µ —É–∑–Ω–∞–ª. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è.", "–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!"),
    ][:3]

    CLIENT_MSG_IND = 0
    TARGET_MSG_IND = 1
    N_CRITERIONS = 5
    MAX_TYPOS = 4
    MAX_SCORE_PER_TASK = 100

    USER_PREFIX = "[–°–æ—Ç—Ä—É–¥–Ω–∏–∫]"
    TARGET_PREFIX = "[–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç]"
    CLIENT_PREFIX = "[–ö–ª–∏–µ–Ω—Ç]"
    CHAT_PREFIX = "[–û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞]"

    if "initialized" not in st.session_state:
        st.session_state.chat = GigaChat(
            credentials=st.secrets["GIGAAUTH"],
            verify_ssl_certs=False,
            scope="GIGACHAT_API_CORP",
            model="GigaChat-Pro",
        )
        st.session_state.chat_lite = GigaChat(
            credentials=st.secrets["GIGAAUTH"],
            scope="GIGACHAT_API_CORP",
            verify_ssl_certs=False,
        )

        # Send 'ready' signal to LMS
        html(
            """
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
                <script type="text/javascript">
                window.parent.parent.postMessage({status: 'ready'}, '*');
                var chat_container = parent.document.querySelector('.st-emotion-cache-0');
                chat_container.scrollTop = chat_container.scrollHeight;
                </script>
            """,
            height=0,
        )
        st.session_state.answer_index = 0
        st.session_state.initialized = True

    # Read custom tasks
    if "data" in st.query_params:
        st.session_state.dialog = eval(st.query_params["data"])
        dialog = st.session_state.dialog

    st.session_state.comment = st.query_params.get("comment")
    comment = st.session_state.comment

    # Chat init 
    if "messages" not in st.session_state:
        assert len(dialog), "No tasks provided!"

        st.session_state.dialog_index = 0
        st.session_state.n_dialogs = len(dialog)
        st.session_state.next_dialog = dialog[0]

        st.session_state.messages = [
            {
                "role": "assistant",
                "avatar": "üë®‚Äçüíº",
                "content_type": ["text"],
                "content": [st.session_state.next_dialog[CLIENT_MSG_IND]],
            }
        ]
        st.session_state.show_input = True
        st.session_state.is_last_msg = False
        st.session_state.show_reset_button = False
        st.session_state.input_msg = None
        st.session_state.score = []

    if comment:
        st.markdown(comment)
    st.title("–¢—Ä–µ–Ω–∞–∂—ë—Ä —á–∞—Ç–∞")
    # Chat cache
    for idx, msg_block in enumerate(st.session_state.messages, start=1):
        with st.chat_message(name=msg_block["role"], avatar=msg_block["avatar"]):
            for i, content_type in enumerate(msg_block["content_type"]):
                if content_type == "text":
                    st.write(msg_block["content"][i])
                elif content_type == "expand":
                    if (
                        st.session_state.show_reset_button
                        or st.session_state.is_last_msg
                    ):
                        if idx == len(st.session_state.messages) - (
                            len(st.session_state.messages) % 3
                        ):
                            col1, col2 = st.columns([1, 3])
                            with col1:
                                st.button(
                                    "‚Üª –ü–æ–≤—Ç–æ—Ä",
                                    on_click=reset_last_msg,
                                    use_container_width=True,
                                )
                            with col2.expander(label=msg_block["content"][i][0]):
                                st.write(msg_block["content"][i][1])
                            st.session_state.show_reset_button = False
                    else:
                        with st.expander(label=msg_block["content"][i][0]):
                            st.write(msg_block["content"][i][1])

    def get_string_diff(lstr, rstr):
        rwords = set(rstr.split(" "))
        lwords = set(lstr.split(" "))

        rstr = " ".join(
            [f":green[{x}]" if x not in lwords else x for x in rstr.split(" ")]
        )
        lstr = " ".join(
            [f":red[{x}]" if x not in rwords else x for x in lstr.split(" ")]
        )
        return lstr, rstr

    # Main application loop
    if st.session_state.show_input:
        input_msg = st.session_state.input_msg
        if input_msg and input_msg.lstrip():
            with st.chat_message("user", avatar="üë®‚Äçüè´"):
                st.write(input_msg)
                st.session_state.messages.append(
                    {
                        "role": "user",
                        "avatar": "üë®‚Äçüè´",
                        "content_type": ["text"],
                        "content": [input_msg],
                    }
                )

            with st.chat_message("assistant", avatar="ü§ñ"):
                with st.spinner(text="–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –æ—Ç–≤–µ—Ç..."):
                    # Typo checking
                    typo_input_msg = "".join(x for x in input_msg if not emoji.is_emoji(x)).strip()
                    print(typo_input_msg)
                    typo_prompt = [
                        HumanMessage(
                            content=f"–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∏—Å–ø—Ä–∞–≤–∏–≤ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ, –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ.\n–¢–µ–∫—Å—Ç: {typo_input_msg}\n–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:"
                        )
                    ]
                    # Request LITE model
                    res_typo = st.session_state.chat_lite(typo_prompt).content
                    typo_score = max(MAX_TYPOS - distance(typo_input_msg, res_typo), 0)
                    typo_score *= MAX_SCORE_PER_TASK // MAX_TYPOS

                    lstr_typo, rstr_typo = get_string_diff(typo_input_msg, res_typo)

                    # Emoji checking
                    emoji_prompt = SystemMessage(
                        content="""–¢—ã - —Ç—Ä–µ–Ω–µ—Ä–∞–∂–µ—Ä —Ü–µ–Ω—Ç—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –¢–≤–æ—è —Ü–µ–ª—å: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω–∞–≤—ã–∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤.\n\
                                    –û—Ü–µ–Ω–∏ —Å—Ö–æ–∂–µ—Å—Ç—å –∏ —É–º–µ—Å—Ç–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–º–æ–¥–∂–∏ –≤ –æ—Ç–≤–µ—Ç–µ [–°–æ—Ç—Ä—É–¥–Ω–∏–∫] —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ —Å [–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç]. \n\
                                    –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: 1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∂–∏: <–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π>. –û—Ü–µ–Ω–∫–∞: {0, 25, 50, 75, 100}%.
                                    """
                    )
                    
                    res_emoji = None
                    emoji_in_msg = bool(emoji.distinct_emoji_list(input_msg))
                    emoji_in_target = bool(emoji.distinct_emoji_list(st.session_state.next_dialog[TARGET_MSG_IND]))
                        
                    if emoji_in_msg and emoji_in_target:
                        prompt_content = f"{TARGET_PREFIX} {st.session_state.next_dialog[TARGET_MSG_IND]}\n\
                                           {USER_PREFIX} {input_msg}"

                        prompt = [emoji_prompt, HumanMessage(content=prompt_content)]

                        res_emoji = st.session_state.chat(prompt).content

                        emoji_score = 0
                        # FIXME: Code duplication
                        try:  # Sometimes the response format may be incorrect
                            emoji_score += int(
                                "".join(
                                    list(
                                        filter(
                                            str.isdigit, res_emoji.split("–û—Ü–µ–Ω–∫–∞: ")[-1]
                                        )
                                    )
                                )
                            )
                        except Exception as e:
                            emoji_score = (
                                0  # FIXME: think about how to deal with such cases
                            )
                    elif not emoji_in_msg and not emoji_in_target:
                        emoji_score = 100
                    elif not emoji_in_msg and emoji_in_target:
                        emoji_score = -1
                    else:
                        emoji_score = -2

                    # Main analysis
                    prompt_content = f"{CLIENT_PREFIX} {st.session_state.next_dialog[CLIENT_MSG_IND]}\n\
                                {TARGET_PREFIX} {st.session_state.next_dialog[TARGET_MSG_IND]}\n\
                                {USER_PREFIX} {input_msg}\
                                "

                    prompt = [system_prompt, HumanMessage(content=prompt_content)]

                    # Request PRO model
                    res_rest = st.session_state.chat(prompt).content

                    rest_score = 0
                    try:  # Sometimes the response format may be incorrect
                        for x in res_rest.split("\n"):
                            rest_score += int(
                                "".join(
                                    list(filter(str.isdigit, x.split("–û—Ü–µ–Ω–∫–∞: ")[-1]))
                                )
                            )
                    except Exception as e:
                        rest_score = 0  # FIXME: think about how to deal with such cases

                task_score = min(
                    round((rest_score + emoji_score + typo_score) / N_CRITERIONS), MAX_SCORE_PER_TASK
                )
                st.session_state.score.append(task_score)

                chat_response = f"{res_rest}\n\n–ë–∞–ª–ª –∑–∞ –æ—Ç–≤–µ—Ç: {task_score}% –∏–∑ {MAX_SCORE_PER_TASK}%\n\n"

                if typo_score == MAX_SCORE_PER_TASK:
                    message_typo = "1. –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞: –û—à–∏–±–æ–∫ –Ω–µ—Ç. –û—Ü–µ–Ω–∫–∞: 100%"
                else:
                    message_typo = f'1. –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞: –ù–∞–π–¥–µ–Ω—ã –æ–ø–µ—á–∞—Ç–∫–∏: "{lstr_typo}"; \n–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{rstr_typo}". \n–û—Ü–µ–Ω–∫–∞: {typo_score}%'

                if emoji_score == MAX_SCORE_PER_TASK:
                    message_emoji = (
                        res_emoji
                        or "1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∂–∏: –≠–º–æ–¥–∂–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å. –û—Ü–µ–Ω–∫–∞: 100%"
                    )
                elif emoji_score == 0:
                    message_emoji = res_emoji
                elif emoji_score == -1:
                    message_emoji = "1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∂–∏: –í –¥–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∂–∏. –û—Ü–µ–Ω–∫–∞: 0%"
                elif emoji_score == -2:
                    message_emoji = "1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∂–∏: –í –¥–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∂–∏. –û—Ü–µ–Ω–∫–∞: 0%"
                else:
                    message_emoji = res_emoji

                target_expander = [
                    "–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç",
                    dialog[st.session_state.dialog_index][TARGET_MSG_IND],
                ]

                st.write(
                    f"{CHAT_PREFIX}\n{message_typo}\n{message_emoji}\n{chat_response}"
                )
                col1, col2 = st.columns([1, 3])
                with col1:
                    st.button(
                        "‚Üª –ü–æ–≤—Ç–æ—Ä", on_click=reset_last_msg, use_container_width=True
                    )
                with col2.expander(label=target_expander[0]):
                    st.write(target_expander[1])

                st.session_state.messages.append(
                    {
                        "role": "assistant",
                        "avatar": "ü§ñ",
                        "content_type": ["text", "expand"],
                        "content": [
                            f"{CHAT_PREFIX}\n{message_typo}\n{message_emoji}\n{chat_response}",
                            target_expander,
                        ],
                    }
                )

            st.session_state.answer_index += (
                1 if not st.session_state.answer_index else 3
            )
            st.session_state.dialog_index += 1

            if st.session_state.dialog_index < st.session_state.n_dialogs:
                st.session_state.next_dialog = dialog[st.session_state.dialog_index]

                with st.chat_message("assistant", avatar="üë®‚Äçüíº"):
                    st.write(st.session_state.next_dialog[CLIENT_MSG_IND])

                st.session_state.messages.append(
                    {
                        "role": "assistant",
                        "avatar": "üë®‚Äçüíº",
                        "content_type": ["text"],
                        "content": [st.session_state.next_dialog[CLIENT_MSG_IND]],
                    }
                )
            else:
                st.session_state.is_last_msg = True
                st.session_state.show_input = False
                st.rerun()  # To hide input bar

        # st.markdown('''<script>a = document.getElementsByClassName("st-emotion-cache-0"); console.log(a);</script>''', unsafe_allow_html=True)
        custom_input(disabled=False, key="input_msg")
        temp = st.empty()
        with temp:
            st.components.v1.html(js_scroll)
            time.sleep(0.5)
        temp.empty()
    
    if st.session_state.dialog_index >= st.session_state.n_dialogs:
        with st.chat_message("assistant", avatar="ü§ñ"):
            percent_result = round(
                sum(st.session_state.score)
                / (len(st.session_state.score) * MAX_SCORE_PER_TASK)
                * 100,
                2,
            )

            st.write("–ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Å–ø–∞—Å–∏–±–æ!")
            st.markdown(
                f'<h1 align="center">–í–∞—à –±–∞–ª–ª: {sum(st.session_state.score)}/{len(st.session_state.score) * MAX_SCORE_PER_TASK}\n\n({percent_result}%)</h1>',
                unsafe_allow_html=True,
            )
            
            
            html(
                f"""
                <script>
                    window.parent.parent.postMessage({{result: {[sum(st.session_state.score), len(st.session_state.score) * MAX_SCORE_PER_TASK]}}}, "*");
                </script>
                    """,
                height=0,
            )
        temp = st.empty()
        with temp:
                st.components.v1.html(js_scroll)
                time.sleep(0.5)
        temp.empty()



except Exception as e:
    print(e)
    st.error("Internal server error")
    st.stop()
