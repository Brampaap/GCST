import streamlit as st
import time
import html
from streamlit.components.v1 import html as html_st
import streamlit.components.v1 as components
from modules.typos import processor as typo
from modules.semantic import proccesor as semantic_sim
from modules.emoji import proccesor as emoji_proc
from modules.common.prompt import global_prompt
from modules.common.parsers import score as score_parser
import constants

from langchain.schema import HumanMessage, SystemMessage
from langchain.chat_models.gigachat import GigaChat

emoji_list = [
    "üòä",
    "üòä",
    "üôÇ",
    "üòå",
    "üòâ",
    "üòê",
    "üòû",
    "üôÅ",
    "üòî",
    "‚ùÑÔ∏è",
    "‚≠êÔ∏è",
    "ü§ó",
    "üå∑",
    "üå∫",
    "üåπ",
    "‚òòÔ∏è",
    "üíê",
    "‚è≥Ô∏è",
    "‚åõÔ∏è",
    "üöÄ",
    "‚òÄÔ∏è",
    "üåü",
    "üåû",
    "üî•",
    "‚ö°Ô∏è",
    "‚ú®Ô∏è",
    "üéà",
    "üéâ",
    "üéä",
    "üéÅ",
    "üìç",
    "üìå",
    "‚úÖÔ∏è",
    "‚òëÔ∏è",
    "‚úîÔ∏è",
    "üíô",
    "ü©µ",
    "ü§ç",
    "üëã",
    "ü´∂",
    "üôå",
    "üí™",
    "üôè",
]

js_scroll = """
<script>
    itemsScrollTo = parent.window.document.getElementsByClassName("st-emotion-cache-0"); itemsScrollTo[itemsScrollTo.length-1].scrollIntoView();
</script>
"""

try:
    custom_input = components.declare_component("custom_input", path="./frontend")

    def render_no_copy_text(text: str) -> str:
        rendered = f"""
        <div class="text-container">
            <div class="overlay"></div>
            <div class="no-select-text">
                <p>{html.escape(text)}</p>
            </div>  
        </div>"""

        return rendered

    def reset_last_msg():
        st.session_state.input_msg = None
        st.session_state.show_input = True
        st.session_state.is_last_msg = False

        st.session_state.messages = st.session_state.messages[
            : st.session_state.answer_index
        ]
        st.session_state.answer_index -= 3

        st.session_state.dialog_index -= 1
        st.session_state.next_dialog = dialog[st.session_state.dialog_index]
        st.session_state.score.pop()
        st.session_state.show_reset_button = len(st.session_state.messages) > 1

    st.markdown(
        """
            <style>
            .text-container {
                position: relative;
                display: inline-block;
                width: 100%;
            }

            .overlay {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: transparent;
                z-index: 10;
            }

            .no-select-text {
                pointer-events: none;
            }

            .no-select-text > p {
                -webkit-user-select: none; /* Safari */
                -moz-user-select: none;
                -ms-user-select: none;
                user-select: none;
            }

            span {
                word-break: break-all; 
            }

            iframe {
                position: fixed;
                bottom: 0;
                z-index: 100;
            }

            .st-emotion-cache-8ijwm3 {
                height: 48px;
            }
        
            .stApp [data-testid="stToolbar"]{
                display:none;
            }
            
            .st-emotion-cache-qcqlej{
                display:none;
            }
            
            .block-container {
                padding: 2rem 1rem 10rem 1rem;
            }
            </style>
        """,
        unsafe_allow_html=True,
    )

    system_prompt = SystemMessage(content=global_prompt)

    dialog = [
        (
            "–ú–µ–Ω—è —É–∂–µ —Ç—Ä—è—Å–µ—Ç –æ—Ç –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç-—Ü–µ–Ω—Ç—Ä–∞. –û–±—ä—è—Å–Ω–∏—Ç–µ, –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∫–∞–∫–æ–≥–æ –∑–∞–∫–æ–Ω–∞ –≤–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–∞–º–∏ –ø—Ä–µ—Ä—ã–≤–∞—é—Ç —Å–≤—è–∑—å?",
            "–°–æ–∂–∞–ª–µ—é, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–∞–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —É –í–∞—Å —Å–ª—É—á–∏–ª–æ—Å—å?",
        ),
        (
            "–ñ–∞–ª–æ–±—É –ø–∏—à–∏—Ç–µ –¥–∞–≤–∞–π—Ç–µ!!!",
            "–Ø –∏—Å–∫—Ä–µ–Ω–Ω–µ —Ö–æ—á—É –í–∞–º –ø–æ–º–æ—á—å üôè! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å –∫–∞–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –í—ã –æ–±—Ä–∞—â–∞–ª–∏—Å—å?",
        ),
        (
            "–ù–µ –Ω–∞–¥–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –∫–∞–∫–æ–π —É –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å! –ü–∏—à–∏—Ç–µ –∂–∞–ª–æ–±—É!!!",
            "–•–æ—Ä–æ—à–æ. –î–∞–≤–∞–π—Ç–µ —Å–≤–µ—Ä–∏–º –í–∞—à—É —Ñ–∞–º–∏–ª–∏—é, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. –ù–∞–∑–æ–≤–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
        ),
        (
            "–ó–∞—á–µ–º? –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–∞–º–∏ –Ω–∞–π—Ç–∏? ... –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á, 15 –º–∞—è 1980. –ß—Ç–æ –µ—â–µ –≤–∞–º —Ç–∞–º –æ—Ç –º–µ–Ω—è –Ω—É–∂–Ω–æ?!",
            "–°–ø–∞—Å–∏–±–æ, —è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —Å–æ–æ–±—â—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –æ–± —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, –æ–Ω –ø—Ä–∏–º–µ—Ç –≤—Å–µ –º–µ—Ä—ã.",
        ),
        (
            "–õ–∏—à–∏—Ç–µ –ø—Ä–µ–º–∏–∏ –Ω–µ—Ä–∞–¥–∏–≤–æ–≥–æ! –Ø –Ω–µ —Ö–æ—á—É –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç—Ä–∞—Ç–∏—Ç—å —Å—Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –Ω–∞ –≤–∞—Å. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥–∞–ª–∏?",
            "–î–∞, –±—É–¥—å—Ç–µ —É–≤–µ—Ä–µ–Ω—ã. –Ø –∂–µ–ª–∞—é –í–∞–º –ø–æ–º–æ—á—å, —Å –∫–∞–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –í—ã –æ–±—Ä–∞—â–∞–ª–∏—Å—å?",
        ),
        ("–ù–µ—Ç, —è —É–∂–µ –≤—Å–µ —É–∑–Ω–∞–ª. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è.", "–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!"),
    ][:3]

    if "initialized" not in st.session_state:
        st.session_state.chat = GigaChat(
            credentials=st.secrets["GIGAAUTH"],
            verify_ssl_certs=False,
            scope="GIGACHAT_API_CORP",
            model="GigaChat-Pro",
            temperature=0.01,
        )
        lite_model = GigaChat(
            credentials=st.secrets["GIGAAUTH"],
            scope="GIGACHAT_API_CORP",
            verify_ssl_certs=False,
            temperature=0.01,
        )
        st.session_state.semantic_sim_processor = semantic_sim.SemanticSimProcessor(
            model=st.session_state.chat, emb_secret=st.secrets["GIGAAUTH"]
        )
        st.session_state.typo_processor = typo.TypoProcessor(model=lite_model)
        st.session_state.emoji_processor = emoji_proc.EmojiProcessor(
            model=st.session_state.chat
        )

        # Send 'ready' signal to LMS
        html_st(
            """
                <script type="text/javascript">
                window.parent.parent.postMessage({status: 'ready'}, '*');
                var chat_container = parent.document.querySelector('.st-emotion-cache-0');
                chat_container.scrollTop = chat_container.scrollHeight;
                </script>
            """,
            height=0,
        )
        st.session_state.answer_index = 0
        st.session_state.initialized = True

    # Read custom tasks
    if "data" in st.query_params:
        st.session_state.dialog = eval(st.query_params["data"])
        dialog = st.session_state.dialog

    st.session_state.comment = st.query_params.get("comment")
    comment = st.session_state.comment

    # Chat init
    if "messages" not in st.session_state:
        assert len(dialog), "No tasks provided!"

        st.session_state.dialog_index = 0
        st.session_state.n_dialogs = len(dialog)
        st.session_state.next_dialog = dialog[0]

        st.session_state.messages = [
            {
                "role": "assistant",
                "avatar": "üë®‚Äçüíº",
                "content_type": ["text"],
                "content": [st.session_state.next_dialog[constants.CLIENT_MSG_IND]],
            }
        ]
        st.session_state.show_input = True
        st.session_state.is_last_msg = False
        st.session_state.show_reset_button = False
        st.session_state.input_msg = None
        st.session_state.score = []

    if comment:
        st.markdown(comment)
    st.title("–¢—Ä–µ–Ω–∞–∂—ë—Ä —á–∞—Ç–∞")
    # Chat cache
    for idx, msg_block in enumerate(st.session_state.messages, start=1):
        with st.chat_message(name=msg_block["role"], avatar=msg_block["avatar"]):
            for i, content_type in enumerate(msg_block["content_type"]):
                if content_type == "text":
                    st.write(msg_block["content"][i])
                elif content_type == "expand":
                    if (
                        st.session_state.show_reset_button
                        or st.session_state.is_last_msg
                    ):
                        if idx == len(st.session_state.messages) - (
                            len(st.session_state.messages) % 3
                        ):
                            col1, col2 = st.columns([1, 3])
                            with col1:
                                st.button(
                                    "‚Üª –ü–æ–≤—Ç–æ—Ä",
                                    on_click=reset_last_msg,
                                    use_container_width=True,
                                )
                            with col2.expander(label=msg_block["content"][i][0]):
                                st.markdown(
                                    render_no_copy_text(msg_block["content"][i][1]),
                                    unsafe_allow_html=True,
                                )
                            st.session_state.show_reset_button = False
                    else:
                        with st.expander(label=msg_block["content"][i][0]):
                            st.markdown(
                                render_no_copy_text(msg_block["content"][i][1]),
                                unsafe_allow_html=True,
                            )

    # Main application loop
    if st.session_state.show_input:
        input_msg = st.session_state.input_msg
        if input_msg and input_msg.lstrip():
            with st.chat_message("user", avatar="üë®‚Äçüè´"):
                st.write(input_msg)
                st.session_state.messages.append(
                    {
                        "role": "user",
                        "avatar": "üë®‚Äçüè´",
                        "content_type": ["text"],
                        "content": [input_msg],
                    }
                )

            with st.chat_message("assistant", avatar="ü§ñ"):

                with st.spinner(text="–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –æ—Ç–≤–µ—Ç..."):
                    vals_in_res = 0
                    # --- Typo checking
                    typo_score, message_typo = st.session_state.typo_processor.run(
                        input_msg
                    )
                    vals_in_res += 1

                    input_msg = input_msg.lower()
                    # --- Semantic similarity checking
                    (semantic_score, found), message_semantic = (
                        st.session_state.semantic_sim_processor.run(
                            user_message=input_msg,
                            target_message=st.session_state.next_dialog[
                                constants.TARGET_MSG_IND
                            ],
                        )
                    )
                    vals_in_res += found

                    # --- Emoji checking
                    (emoji_score, found), message_emoji = (
                        st.session_state.emoji_processor.run(
                            user_message=input_msg,
                            target_message=st.session_state.next_dialog[
                                constants.TARGET_MSG_IND
                            ],
                        )
                    )
                    vals_in_res += found

                    # --- Main analysis
                    prompt_content = f"""
                        {constants.TARGET_PREFIX} {st.session_state.next_dialog[constants.TARGET_MSG_IND]}\n\
                        {constants.USER_PREFIX} {input_msg}
                    """

                    prompt = [system_prompt, HumanMessage(content=prompt_content)]

                    # Request PRO model
                    res_rest = st.session_state.chat(prompt).content
                    rest_score = 0
                    for x in res_rest.split("\n"):
                        score, found = score_parser.split_parse_score(
                            x, constants.SCORE_PATTERN
                        )
                        rest_score += score
                        vals_in_res += found

                target_expander = [
                    "–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç",
                    dialog[st.session_state.dialog_index][constants.TARGET_MSG_IND],
                ]

                task_score = min(
                    round(
                        sum([rest_score, emoji_score, typo_score, semantic_score])
                        / vals_in_res
                    ),
                    constants.MAX_SCORE_PER_TASK,
                )
                st.session_state.score.append(task_score)
                score_message = f"{res_rest}\n\n–ë–∞–ª–ª –∑–∞ –æ—Ç–≤–µ—Ç: {task_score}% –∏–∑ {constants.MAX_SCORE_PER_TASK}%\n\n"

                final_message = "\n".join(
                    [
                        constants.CHAT_PREFIX,
                        message_typo,
                        message_emoji,
                        message_semantic,
                        score_message,
                    ]
                )
                st.write(final_message)

                col1, col2 = st.columns([1, 3])
                with col1:
                    st.button(
                        "‚Üª –ü–æ–≤—Ç–æ—Ä", on_click=reset_last_msg, use_container_width=True
                    )
                with col2.expander(label=target_expander[0]):
                    st.markdown(
                        render_no_copy_text(target_expander[1]), unsafe_allow_html=True
                    )

                st.session_state.messages.append(
                    {
                        "role": "assistant",
                        "avatar": "ü§ñ",
                        "content_type": ["text", "expand"],
                        "content": [
                            final_message,
                            target_expander,
                        ],
                    }
                )

            st.session_state.answer_index += (
                1 if not st.session_state.answer_index else 3
            )
            st.session_state.dialog_index += 1

            if st.session_state.dialog_index < st.session_state.n_dialogs:
                st.session_state.next_dialog = dialog[st.session_state.dialog_index]

                with st.chat_message("assistant", avatar="üë®‚Äçüíº"):
                    st.write(st.session_state.next_dialog[constants.CLIENT_MSG_IND])

                st.session_state.messages.append(
                    {
                        "role": "assistant",
                        "avatar": "üë®‚Äçüíº",
                        "content_type": ["text"],
                        "content": [
                            st.session_state.next_dialog[constants.CLIENT_MSG_IND]
                        ],
                    }
                )
            else:
                st.session_state.is_last_msg = True
                st.session_state.show_input = False
                st.rerun()  # To hide input bar

        custom_input(disabled=False, key="input_msg")
        temp = st.empty()
        with temp:
            html_st(js_scroll)
            time.sleep(0.5)
        temp.empty()

    if st.session_state.dialog_index >= st.session_state.n_dialogs:
        with st.chat_message("assistant", avatar="ü§ñ"):
            percent_result = round(
                sum(st.session_state.score)
                / (len(st.session_state.score) * constants.MAX_SCORE_PER_TASK)
                * 100,
                2,
            )

            st.write("–ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Å–ø–∞—Å–∏–±–æ!")
            st.markdown(
                f'<h1 align="center">–í–∞—à –±–∞–ª–ª: {percent_result}%</h1>',
                unsafe_allow_html=True,
            )

            html_st(
                f"""
                <script>
                    window.parent.parent.postMessage({{result: {[sum(st.session_state.score), len(st.session_state.score) * constants.MAX_SCORE_PER_TASK]}}}, "*");
                </script>
                    """,
                height=0,
            )
        temp = st.empty()
        with temp:
            html_st(js_scroll)
            time.sleep(0.5)
        temp.empty()


except Exception as e:
    print(e)
    st.error("Internal server error")
    st.stop()
