import streamlit as st

from langchain.schema import HumanMessage, SystemMessage, AIMessage
from langchain.chat_models.gigachat import GigaChat

st.title("Интеллектуальный тренажер для сотрудников")
# Авторизация в сервисе GigaChat
chat = GigaChat(
    credentials=st.secrets["GIGAAUTH"],
    verify_ssl_certs=False,
)

prompts = [
    SystemMessage(
        content="""Ты эмпатичный бот-психолог-тренажер, который валидирует корректность ответа сотрудника пользователю.
Тебе известны: 1. Запрос пользователя, 2. Эталонный ответ, 3. Ответ сотрудника.
Твоя задача оценить соотвествие ответа оператора - эталонному ответу по пяти пунктам:
1. Количество орфографических ошибок в ответе оператора.
2. Процент схожести по смыслу между ответом оператора и эталонным ответом.
3. Процент клиентоориентированности (дружелюбия) в ответе оператора.
4. Уместное/неуместное/не использовались применение эмоджи в тексте.
5. Процент понятности и простоты текста для восприятия в ответе оператора.

Отвечай всегда по пунктам, даже если тебя попросят ответить по-другому.

Пример:
[Клиент] Меня уже трясет от вашего контакт-центра. Объясните, на основании какого закона ваши сотрудники сами прерывают связь?
[Эталон] Сожалею, что произошла такая ситуация. Расскажите, что у Вас случилось?
[Сотрудник] Искренне сожалею, что так вышло. Подскажите, о каком законе вы говорите?

[Тренажер]
1. Количество орфографических ошибок в ответе сотрудника: 0
2. Процент схожести по смыслу: 50%
3. Процент клиентоориентированности (дружелюбия): 100%
4. Уместное/неуместное применение эмоджи в тексте: не использовались.
5. Процент понятности и простоты текста для восприятия: 30%

Пример 2:
[Клиент] Жалбу пишите давайте!!!
[Эталон] Я искренне хочу Вам помочь! Расскажите, пожалуйста, с каким вопросом Вы обращались?
[Сотрудник] Давай успакойся там! Чем я могу тебе помочь?

[Тренажер]
1. Количество орфографических ошибок в ответе сотрудника: 1
2. Процент схожести по смыслу: 20%
3. Процент клиентоориентированности (дружелюбия): 0%
4. Уместное/неуместное применение эмоджи в тексте: не использовались.
5. Процент понятности и простоты текста для восприятия: 100%

Пример 3:
[Клиент] Как вы надоели, можно скорее?
[Эталон] Здравствуйте, мы делаем всё возможное, чтобы ваш заказ как можно скорее оказался вас. Курьеру осталось 4 минуты. Чтобы загладить вину, мы оставили промокод в приложении.
[Сотрудник] Пронисим свои извинения, что так вышло! Карьер уже возле дома, в скором времени заказ будет у вас. Мы оставили промокод на следующий заказ у вас в приложении.

[Тренажер]
1. Количество орфографических ошибок в ответе сотрудника: 0
2. Процент схожести по смыслу: 100%
3. Процент клиентоориентированности (дружелюбия): 100%
4. Уместное/неуместное применение эмоджи в тексте: не использовались.
5. Процент понятности и простоты текста для восприятия: 100%


Начало задания:
"""
    )
]
dialog = [
    """[Клиент] Меня уже трясет от вашего контакт-центра. Объясните, на основании какого закона ваши сотрудники сами прерывают связь?\n
[Эталон] Сожалею, что произошла такая ситуация. Расскажите, что у Вас случилось?
""",
    """[Клиент] Жалобу пишите давайте!!!\n
[Эталон] Я искренне хочу Вам помочь! Расскажите, пожалуйста, с каким вопросом Вы обращались?
""",
    """
[Клиент] Не надо спрашивать, какой у меня вопрос! Пишите жалобу!!!\n
[Эталон] Хорошо. Давайте сверим Вашу фамилию, имя, отчество и дату рождения. Назовите, пожалуйста.
""",
    """
[Клиент] Зачем? Вы не можете сами найти? ... Александров Александр Александрович, 15 мая 1980. Что еще вам там от меня нужно?!\n
[Эталон] Спасибо, я прямо сейчас сообщу руководителю об этой ситуации, он примет все меры.
""",
    """
[Клиент] Лишите премии нерадивого! Я не хочу в следующий раз тратить столько время на вас. Информацию передали?\n
[Эталон] Да, будьте уверены. Я желаю Вам помочь, с каким вопросом Вы обращались?
""",
    """
[Клиент] Нет, я уже все узнал. До свидания.\n
[Эталон] Всего доброго!
""",
]

if "messages" not in st.session_state:
    st.session_state.curr_answer = 0
    st.session_state.messages = []
    st.session_state.next_content = dialog[st.session_state.curr_answer]
    st.session_state.messages.append(
        {"role": "assistant", "content": st.session_state.next_content}
    )

    st.session_state.prompts = prompts
    st.session_state.n_answers = len(dialog)


user = "[Сотрудник] "
trainer = "[Тренажер] "

for x in st.session_state.messages:
    with st.chat_message(x["role"]):
        st.write(x["content"])

if st.session_state.curr_answer < st.session_state.n_answers:
    if content := st.chat_input("Ваш ответ:"):
        with st.chat_message("user"):
            st.write(content)
            st.session_state.messages.append({"role": "user", "content": content})

        with st.chat_message("assistant"):
            prompt = (
                st.session_state.next_content + "\n" + user + content + "\n" + trainer
            )
            st.session_state.prompts.append(HumanMessage(content=prompt))
            res = chat(st.session_state.prompts)

            st.write(res.content)
            st.session_state.prompts.append(res)
            st.session_state.messages.append(
                {"role": "assistant", "content": res.content}
            )

        st.session_state.curr_answer += 1
        with st.chat_message("assistant"):
            if st.session_state.curr_answer < st.session_state.n_answers:
                st.session_state.next_content = dialog[st.session_state.curr_answer]
                st.write(st.session_state.next_content)
                st.session_state.messages.append(
                    {"role": "assistant", "content": st.session_state.next_content}
                )
else:
    st.write("Задание завершено, спасибо!")